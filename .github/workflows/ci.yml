name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          
      - name: Run tests
        run: go test -v ./...

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.BOT_KEY }}

      - name: Debug SSH setup
        run: |
          echo "Testing SSH connection..."
          ssh-add -l
          ssh -o StrictHostKeyChecking=no -vvv atom@${{ secrets.SERVER_IP }} "
            echo 'Connection successful' &&
            echo 'Current user:' &&
            whoami &&
            echo 'SSH directory contents:' &&
            ls -la ~/.ssh/
          "
          
      - name: Prepare deployment directory
        run: |
          ssh -o StrictHostKeyChecking=no atom@${{ secrets.SERVER_IP }} "
            mkdir -p /home/atom/goBot &&
            ls -la /home/atom &&
            echo 'Current permissions:' &&
            ls -la /home/atom/goBot
          "

      - name: Upload code to VPS
        run: |
          scp -o StrictHostKeyChecking=no -r * atom@${{ secrets.SERVER_IP }}:/home/atom/goBot/
          
      - name: Create env file on VPS
        run: |
          ssh -o StrictHostKeyChecking=no atom@${{ secrets.SERVER_IP }} "
            cat > /home/atom/goBot/.env << EOL
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            SCHEDULE_TIME=0 9 * * *
            NEWS_CATEGORY=technology
            NEWS_LANGUAGE=en
            EOL
          "

      - name: Deploy with Docker
        run: |
          ssh -o StrictHostKeyChecking=no atom@${{ secrets.SERVER_IP }} "
            cd /home/atom/goBot &&
            
            # Build new image
            docker build -t gobot:$(date +%Y%m%d_%H%M%S) .
            
            # Get the new image ID
            NEW_IMAGE=\$(docker images -q gobot:$(date +%Y%m%d_%H%M%S))
            
            # Create and start new container
            docker run -d \
              --name gobot_new \
              --restart unless-stopped \
              --network host \
              --env-file .env \
              \$NEW_IMAGE
            
            # Wait for container to start
            echo 'Waiting for container to start...'
            sleep 15
            
            # Check if old container exists and remove it
            if docker ps -a | grep -q gobot_prod; then
              docker stop gobot_prod
              docker rm gobot_prod
            fi
            
            # Rename new container
            docker rename gobot_new gobot_prod
            
            # Remove old images except the last 3
            docker images 'gobot:*' --format '{{.ID}}' | tail -n +4 | xargs -r docker rmi
            
            # Print container status
            docker ps | grep gobot_prod
          " 