name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.BOT_KEY }}
          log-public-key: false

      - name: Verify Dockerfile
        run: cat Dockerfile | grep "FROM golang:latest"

      - name: Deploy to VPS
        run: |
          # Prepare directory
          echo "Creating directory..."
          ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "mkdir -p /home/atom/goBot" > /dev/null 2>&1
          
          # Upload code
          echo "Uploading code..."
          rsync -av -e "ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null" ./ atom@${{ secrets.SERVER_IP }}:/home/atom/goBot/ --exclude .git
          
          # Create env file
          echo "Creating env file..."
          ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "cat > /home/atom/goBot/.env << 'EOL'
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          SCHEDULE_TIME=0 9 * * *
          NEWS_CATEGORY=technology
          NEWS_LANGUAGE=en
          EOL" > /dev/null 2>&1
          
          # Deploy
          echo "Starting deployment..."
          ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "
            cd /home/atom/goBot &&
            echo 'Verifying Dockerfile on server...' &&
            cat Dockerfile | grep 'FROM golang:latest' &&
            echo 'Building Docker image...' &&
            TIMESTAMP=\$(date +%s) &&
            IMAGE=\"gobot:\$TIMESTAMP\" &&
            docker build --pull --no-cache -t \$IMAGE . &&
            
            echo 'Starting new container...' &&
            docker run -d --name gobot_new --restart unless-stopped --network host --env-file .env \$IMAGE &&
            
            echo 'Waiting for container to start...' &&
            sleep 5 &&
            
            echo 'New container status:' &&
            docker ps | grep gobot_new &&
            
            echo 'New container logs:' &&
            docker logs gobot_new &&
            
            echo 'Stopping old container...' &&
            docker ps -a | grep -q gobot_prod && docker stop gobot_prod && docker rm gobot_prod || true &&
            
            echo 'Renaming new container to prod...' &&
            docker rename gobot_new gobot_prod &&
            
            echo 'Cleaning up old images...' &&
            docker images 'gobot:*' --format '{{.ID}}' | tail -n +5 | xargs -r docker rmi || true &&
            
            echo 'Deployment successful!'
          "
          echo "Deployment completed successfully"
