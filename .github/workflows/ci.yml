name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.BOT_KEY }}
          log-public-key: false

      - name: Deploy to VPS
        run: |
          # Prepare directory
          ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "mkdir -p /home/atom/goBot" 2>/dev/null
          
          # Upload code
          rsync -q --no-verbose -e "ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null" ./ atom@${{ secrets.SERVER_IP }}:/home/atom/goBot/ --exclude .git 2>/dev/null
          
          # Create env file and deploy
          ssh -o StrictHostKeyChecking=no -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "
            cd /home/atom/goBot &&
            cat > .env << EOL
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            SCHEDULE_TIME=0 9 * * *
            NEWS_CATEGORY=technology
            NEWS_LANGUAGE=en
            EOL

            docker build -q -t gobot:\$(date +%s) . &&
            IMAGE=gobot:\$(date +%s) &&
            docker run -d --name gobot_new --restart unless-stopped --network host --env-file .env \$IMAGE &&
            sleep 15 &&
            docker ps -a | grep -q gobot_prod && docker stop gobot_prod && docker rm gobot_prod || true &&
            docker rename gobot_new gobot_prod &&
            docker images 'gobot:*' --format '{{.ID}}' | tail -n +4 | xargs -r docker rmi
          " 2>/dev/null || exit 1
          echo "Deployment completed successfully" 