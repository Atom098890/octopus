name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'
          
      - name: Run tests
        run: go test -v ./...

      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.BOT_KEY }}
          log-public-key: false

      - name: Deploy to VPS
        run: |
          # Prepare directory
          ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "mkdir -p /home/atom/goBot" > /dev/null 2>&1
          
          # Upload code
          rsync -q --no-verbose -e "ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null" ./ atom@${{ secrets.SERVER_IP }}:/home/atom/goBot/ --exclude .git > /dev/null 2>&1
          
          # Create env file
          ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "
            cat > /home/atom/goBot/.env << EOL
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            SCHEDULE_TIME=0 9 * * *
            NEWS_CATEGORY=technology
            NEWS_LANGUAGE=en
            EOL
          " > /dev/null 2>&1
          
          # Deploy
          echo "Starting deployment..."
          ssh -o StrictHostKeyChecking=no -o LogLevel=QUIET -o UserKnownHostsFile=/dev/null atom@${{ secrets.SERVER_IP }} "
            cd /home/atom/goBot &&
            docker build -q -t gobot:\$(date +%s) . > /dev/null 2>&1 &&
            IMAGE=gobot:\$(date +%s) &&
            docker run -d --name gobot_new --restart unless-stopped --network host --env-file .env \$IMAGE > /dev/null 2>&1 &&
            sleep 15 &&
            docker ps -a | grep -q gobot_prod && docker stop gobot_prod > /dev/null 2>&1 && docker rm gobot_prod > /dev/null 2>&1 || true &&
            docker rename gobot_new gobot_prod > /dev/null 2>&1 &&
            docker images 'gobot:*' --format '{{.ID}}' | tail -n +4 | xargs -r docker rmi > /dev/null 2>&1
          " > /dev/null 2>&1
          echo "Deployment completed successfully" 