package telegram

import (
	"fmt"
	"log"
	"strings"

	"github.com/andrei/goBot/internal/news"
	"github.com/andrei/goBot/internal/summarizer"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api    *tgbotapi.BotAPI
	users  *Users
	logger *log.Logger
}

func NewBot(token string, logger *log.Logger) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("error creating telegram bot: %w", err)
	}

	return &Bot{
		api:    api,
		users:  NewUsers(),
		logger: logger,
	}, nil
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := b.api.GetUpdatesChan(u)

	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –±–æ—Ç–∞
	// –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –∫–æ–º–∞–Ω–¥–∞ /start
	for update := range updates {
		if update.Message != nil && update.Message.Command() == "start" {
			b.handleStartCommand(update.Message)
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ –∫–∞–Ω–∞–ª
		if len(updates) == 0 {
			break
		}
	}

	b.logger.Println("Bot started and ready to receive messages")

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		switch update.Message.Command() {
		case "start":
			b.handleStartCommand(update.Message)
		case "news":
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
			b.api.Send(msg)
			
			// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å processNews, –Ω–æ —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ main.go,
			// –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
			b.api.Send(msg)
		case "help":
			b.handleHelpCommand(update.Message)
		}
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStartCommand(message *tgbotapi.Message) {
	userID := message.Chat.ID
	userName := message.From.UserName
	
	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
	b.users.Add(userID)
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	greeting := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n"+
		"–Ø –±–æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"+
		"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"+
		"/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"+
		"/news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"+
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n\n"+
		"–ñ–¥–∏ –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /news, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë —Å–µ–π—á–∞—Å!",
		userName)
	
	msg := tgbotapi.NewMessage(userID, greeting)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
	
	b.logger.Printf("New user subscribed: %s (ID: %d)", userName, userID)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	helpText := "<b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n" +
		"–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n" +
		"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" +
		"/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏\n" +
		"/news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å\n\n" +
		"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."
	
	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	msg.ParseMode = "HTML"
	b.api.Send(msg)
}

func (b *Bot) SendArticleSummary(article *news.Article, summary *summarizer.Summary) error {
	message := b.formatMessage(article, summary)
	
	for _, userID := range b.users.GetAll() {
		msg := tgbotapi.NewMessage(userID, message)
		msg.ParseMode = "HTML"
		msg.DisableWebPagePreview = false

		_, err := b.api.Send(msg)
		if err != nil {
			b.logger.Printf("Error sending message to user %d: %v", userID, err)
			continue
		}
	}

	return nil
}

func (b *Bot) formatMessage(article *news.Article, summary *summarizer.Summary) string {
	var sb strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏
	sb.WriteString(fmt.Sprintf("<b>üì∞ %s</b>\n", article.Title))
	
	// –ò—Å—Ç–æ—á–Ω–∏–∫ –∏ –∞–≤—Ç–æ—Ä
	if article.Source.Name != "" {
		sb.WriteString(fmt.Sprintf("üì¢ <i>%s</i>", article.Source.Name))
		if article.Author != "" {
			sb.WriteString(fmt.Sprintf(" | ‚úçÔ∏è %s", article.Author))
		}
		sb.WriteString("\n")
	}
	sb.WriteString("\n")

	// –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ (–æ–±—Ä–µ–∑–∞–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
	content := article.Content
	if len(content) > 800 {
		lastDot := strings.LastIndex(content[:800], ".")
		if lastDot > 0 {
			content = content[:lastDot+1]
		} else {
			content = content[:800] + "..."
		}
	}
	sb.WriteString(content)
	sb.WriteString("\n\n")

	// –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥
	sb.WriteString("<b>üîë Key Terms:</b>\n")
	for _, keyword := range summary.Keywords {
		translation, ok := summary.Translation[keyword]
		if ok {
			sb.WriteString(fmt.Sprintf("‚Ä¢ %s ‚Äî %s\n", keyword, translation))
		}
	}
	sb.WriteString("\n")

	// –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
	sb.WriteString(fmt.Sprintf("üîó <a href=\"%s\">Read full article</a>\n", article.URL))

	// –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
	sb.WriteString(fmt.Sprintf("\nüìÖ Published: %s", article.PublishedAt.Format("02.01.2006 15:04")))

	return sb.String()
}

// Users –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) Users() *Users {
	return b.users
}